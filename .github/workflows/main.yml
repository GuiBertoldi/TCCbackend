name: CI & SonarCloud

on:
  push:
    branches: [ main ]
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  sonarcloud:
    name: Build, Test & SonarCloud
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '17'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-

      - name: Cache SonarCloud
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar

      - name: Build & run tests (incluindo Jacoco)
        run: mvn clean verify -B

      - name: SonarCloud Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn sonar:sonar \
          -Dsonar.login=${{ env.SONAR_TOKEN }} \
          -Dsonar.projectKey=GuiBertoldi_TCCbackend \
          -Dsonar.organization=guibertoldi \
          -Dsonar.host.url=https://sonarcloud.io

  build-docker:
    name: Build & Push Docker
    runs-on: ubuntu-latest
    needs: sonarcloud

    steps:
      - uses: actions/checkout@v3
      - name: Setup JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '17'
      - name: Build (skip tests)
        run: mvn clean package -DskipTests
      - name: Docker Login
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
      - name: Build & Push
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/tccbackend:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/tccbackend:latest

  deploy:
    name: Deploy to AWS
    runs-on: self-hosted
    needs: build-docker

    steps:
      - name: Pull & Run
        run: |
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/tccbackend:latest
          sudo docker rm -f tccbackend || true
          sudo docker run -d -p 8080:8080 \
            -e DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }} \
            -e DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }} \
            -e DATABASE_URL=${{ secrets.DATABASE_URL }} \
            --name tccbackend \
            ${{ secrets.DOCKER_USERNAME }}/tccbackend:latest
